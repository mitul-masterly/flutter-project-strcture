name: Flutter Build & Upload to App Stores

on:
  push:
    branches:
      - main
#      - release/*
#      - feature/*

jobs:
#  build-android:
#    name: Build and Deploy to Google Play
#    runs-on: macos-latest
#
#    strategy:
#      matrix:
#        flavor: [staging, prod]
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Setup Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          flutter-version: '3.22.0'
#
#      - name: Install dependencies
#        run: flutter pub get
#
#      - name: Decode and Save Keystore
#        env:
#          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
#        run: echo $KEYSTORE_FILE | base64 --decode > android/app/upload-keystore.jks
#
#      - name: Create Key Properties
#        run: |
#          echo "storeFile=upload-keystore.jks" > android/key.properties
#          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
#          echo "keyAlias=${{ secrets.ALIAS }}" >> android/key.properties
#          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
#
#      - name: Build AAB
#        run: flutter build appbundle --flavor ${{ matrix.flavor }} --release
#
#      - name: Install Fastlane
#        run: gem install fastlane
#
#      - name: Decode and Save Google Play JSON Key
#        env:
#          ANDROID_JSON_KEY: ${{ secrets.ANDROID_JSON_KEY }}
#        run: echo $ANDROID_JSON_KEY | base64 --decode > android/google_play_key.json
#
#      - name: Deploy to Google Play
#        run: |
#          cd android
#          fastlane supply \
#            --track beta \
#            --json_key google_play_key.json \
#            --package_name com.masterly.flutterbasecodestg \
#            --aab ../build/app/outputs/bundle/${{ matrix.flavor }}Release/app-${{ matrix.flavor }}-release.aab

  build-ios:
    name: Build and Upload iOS
    runs-on: macos-latest

    strategy:
      matrix:
        flavor: [ staging ] # prod
        scheme: [ staging ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'
          architecture: x64

      - name: Clear Flutter Cache
        run: flutter clean

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Select correct Xcode version
        run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      - name: Decode Certificate
        run: echo ${{ secrets.STAGING_CERTIFICATE_BASE64 }} | base64 --decode > ios/certificate.p12

      - name: Decode Provisioning Profile
        run: echo ${{ secrets.STAGING_PROVISIONING_PROFILE_BASE64 }} | base64 --decode > ios/profile.mobileprovision

      - name: Create Keychain
        run: |
            security create-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} build.keychain
            security unlock-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} build.keychain
            security import ios/certificate.p12 -k build.keychain -P ${{ secrets.STAGING_CERT_PASSWORD }} -T /usr/bin/codesign
            security list-keychains -s build.keychain
            security set-keychain-settings -lut 3600 build.keychain

      - name: Setup Provisioning Profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ios/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Decode and Save ExportOptions.plist
        env:
            IOS_EXPORT_OPTIONS_BASE64: ${{ secrets.IOS_EXPORT_OPTIONS_BASE64 }}
        run: |
              echo $IOS_EXPORT_OPTIONS_BASE64 | base64 --decode > ios/ExportOptions.plist

      - name: Build iOS
        run: flutter build ipa --flavor ${{ matrix.flavor }} --release

      - name: Export IPA
        run: | 
          xcodebuild -exportArchive \
          -archivePath build/ios/archive/Runner.xcarchive \
          -exportPath build/ios/ipa \
          -exportOptionsPlist ios/ExportOptions.plist

      - name: Install Fastlane
        run: gem install fastlane

#      - name: Run Fastlane Match
#        run: fastlane match appstore --readonly=true

      - name: Upload to TestFlight
        env:
          APP_STORE_API_KEY_ID: ${{ secrets.APP_STORE_API_KEY_ID }}
          APP_STORE_ISSUER_ID: ${{ secrets.APP_STORE_ISSUER_ID }}
          APP_STORE_API_KEY: ${{ secrets.APP_STORE_API_KEY }}
          FASTLANE_APPLE_ID: ${{ secrets.FASTLANE_APPLE_ID }}
          FASTLANE_TEAM_ID: ${{ secrets.FASTLANE_TEAM_ID }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: |
          cd ios
          fastlane upload_to_testflight
#          --scheme=${{ matrix.scheme }} --flavor=${{ matrix.flavor }}
